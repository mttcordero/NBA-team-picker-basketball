<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAkGBxMTEhUSExIVFRUVFRcVFxgVFRUXFxUXFxUXFxcVFRcY
        HSggGBolGxUVITEhJSkrLi4uFx8zODMtNygtLiv/2wBDAQoKCg4NDhoQEBstJR8lLS0tLS0tLS0tLS0t
        LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy3/wAARCAC3ARMDASIAAhEBAxEB/8QA
        GwAAAgMBAQEAAAAAAAAAAAAAAwQAAgUBBgf/xAA0EAACAQMBBQYFBAMAAwAAAAAAAQIDESEEBRIxQVET
        YXGBofCRscHR8RQiMuEGQlJyksL/xAAZAQADAQEBAAAAAAAAAAAAAAAAAQIDBAX/xAAtEQACAgIBAgMI
        AgMBAAAAAAAAAQIREiEDMUEEUWETIjJxgaGxwdHhUpHwQv/aAAwDAQACEQMRAD8A+QpHd0u4kOazrBtF
        WgjKMaA5YiRZRLJBYFUiboRRuXURWAPcJuhN040IYFoiiFUC6phYAN0tGAwqRZUxWFANw64B1TLdmGQ8
        RbdOOI12ZzcFkGItuF1APudxOyDJDxFpRByG50wfZjTFiLqJfcDwpl+zByDEWUS4wqRWVMLDEEol2g9K
        iCrRd8BYUUkirLqDOxiAUC3S9dWVg0abvgpqovmUmS0JQjkuwsIHdwLFRRIhdRIIdAmzqiWVyWEOiric
        3S9jqiFjoHul4Urh6VG4ZwE5DURfcOOIZxKuIrHQLdIoBo0mxujoZPohOSRceOUuiEVAJGlfkbNHZF+f
        oPUtiL/r0Mnzx8zpj4HmfY86qJZUO436+xZRTkmpJZdsO3Wwo9O1ZtNXynya7mL2l7Il4eUHUkZqoF40
        DS7LkddEMhYGa6JxUTR7E7HTizDAz+wJ2JpqgVq0eQsx4GO4XOfp+401oxihorZLyFgZy0a6Elpso1uy
        KTpCzFgZUqIOVA0pUDkaWQzDAUlSsgEaNzQr0m3grTo2KzDAUdI4qA46TOqDHmLAThSyK11k0WL1KZWZ
        LgKxhgq0MVItYQKZSZDiUsQ6cKIBtFFl4+IxJIipkWXQKNMYpUL5fD5l6FDmxiwmx0BaK2Dxo3LVKVuC
        FY6FdwNT0/N4Xqxqnp7Lel5L6sFUldibOni4b2y8ILhZW8Lh1s+LzFunLrHh5xeGBpGhRZi5yXRnoQ4Y
        PTRWhqZ0mlWS3eVSP8X/AOX/ACzf07TtYQpNWs0mnxT4MGqb0/7oXlR5rjKn9178ZxXJ00/ybKcuD4nc
        fPuvn5r17d/M9JpaF3bqJf4/RUqThJXSlJK/S9/qMLXLc3adpVJrk8RT5t8kamydm7kEvbby3bxZXs8e
        On1bJfKp82S6JNX5t1r6UYmt2Db91P8A9X9GZEqHcfQf0zMbbez4/wA00pdLpb3l1M6kjHm4oP3onlo6
        cL2A+qBaFEhzOdRM90rK4q6RqV4X4FFp7iyDEQpUWNOlZWHaGnCOiVmLEzlQBzo9xqqiVdATmNQMaVK3
        I7HSmnKgRaZsFMeBnS0oN6c1lpWden7vbHmLAxZUOJz9Pg2JaYpPTu2ECmJwMGdIE6JrVNK+hSnQu+Bc
        ZkuBj1KItOkblagJyoGymYSiZv6chq/pzpeZliY8YeAWnTXMKqYSFO4my6KpoJCkmHhpA6o2xYhzKURa
        FNWC0NPd+r8BmOn7j0Ww9ElRqTVNzm7pWdlGKS/dKX+qbb5Xdsc2nx+/KimlBWzxu0aiXFpeNkZMtpU0
        +Lb7kx7bVH9/7rNu/DgvC/HzEqULcFbyNpKKe9msZcj6Uvv/AAWhtFcqc35f2MU9pS5Up/A5TbHKU2ZN
        x/x+50QjyP8A9/ZHaOrrS4Urd8nb0waGm0lWVt+purmof3/YKlMZWsjBXk7fXwRCm7qCr8m/sYtXyybX
        q6X2r7mstP8ApainDNGpJZf+snizfR2x0fiespa6PLNuPRPo+/u4nhNJq6tf9qW7SfHetlcHj7dOJt7I
        1bo1XRqZazGXWDf7Xbu4Py6nQ4r4pde6OJSk2uPj+Hs3+F5+n7PSyhUmrJ27+C8lxfm14CdTYtNZkt99
        ZZ9OHoOw2jBYckWnqIy4NMiXJapa+RpDgp3JX6v/AKl9Dz2t0u68LD9ANSFl3s2NSkZ1WO87nmz0zacd
        iDpcy9GhcbdHA7pdNdXeCUQ9IR7OxFTyav6Rroyz0dlce2RcTJdLuOfpzS7AsqRJVmPPT2JGiacqd2SN
        AbKQjCjfGSToGnChz99Sq0/MV6F3Mrse4pOhfka6o5KVYDTJk90YVagwUaHHuRrTp3ZJUFu3NIsmR5+v
        QFv0+fM269IpChlGikZNGRKg78H8CGw9OQvMjE8lGlcao0LBaNLuHKNAcpCjEFT07Dx07GadMNGJi5Wb
        qIoqJpVtr9lpnRjjezJ8374FVTsjy+2qz3mu9nR4eVNinC6MnXVN6VwUUdZaKNW7NUi0EMQAuSirsWcp
        VcLEeb6/cahe+wS5VDS2/Iaqa/O5TW9L0Q1otCr79V78u/8AivIDpaMYKyX3fiOU5kSnjqH9mnHxOby5
        d+nZfy/VmxQq+QHaW1HVs4J71FNucc44OOcP7pGVrNU21Ri8yzJ9ImxstxgtxL9rVn334tig1x+8+/b0
        K5lLnuENV39eyX7f0NnZtGjKKnKcp3V8uVsrDSul6B5aXnRnZr/VuVn8W/Sx5rZFZ05zot/xeP8AxfC3
        r5WN6nVFyc0ounTXyHw+G45wU1afzdp9xzR61ybhJbs48U/eUMRpCNWG8lJfzhlPqucWbVCF0vD5o5OW
        nTQcmSVS6rv5gY0L2HYUgtGhjPtF00uJCVHK5X0B0qVyVGXlUSyvIBnjw8/6BypAotsiiSUCyeeISMCY
        7KehXsi6pjG4y8IDoHIC6WCjWbD0ogpUcA0SmKdnYWrQ9TTqU8MTqRG1QJ2xDsy1WirDUoA5y8l6/Epa
        B2zP1FDFylCh8h926+hajDj798Rol9BDsTo84EGQeNoQQ5TiuopSNDT0ebKlbLjSCRo35hY0rFe0XBFp
        TsicSsi8aV2eQ/yeju1pdGk15rPrc9hHURX+y+J5/wDzCnvRjUX+v7X4Pg/j8y+PUirPKJFa1dQ45fJA
        tRqd3CV5Pgvqd0mlzvSzJ+ngdaSSuRMptvGHXz8v7O06Epvenw6fcfjG2EciWuEp2acfEodP9kTCQqWy
        +CyBbF9oVLQsuMnb375kVk6NJTwi5eQbZbcnKo+MnjwXv0NanUM3TLdSS5Kw1CRnyu5WaeHWEEn17/Pu
        M7QladKquf7JfT6fA29NUukzB1H7qM1zVpLxTNTZlTegn3GfJuKf0NOF48ko+dP9P8fc3dLlqx6jSabe
        aXTj4GDsKhvSvyjn7HrqFLdj45MuONvZz+O5NpIBV08uSwLVsYkjTTOajg7pXNJQT6HDGdPZk9muRbdw
        G3SOJztG6YvClkZL06fMtulxjSJlK2DtcNTpkjEZUMFxRnKQtKBRUxmcSqXAWOwy0Cq0hSVDPE0aiF3E
        bQRYhUgvwAdO7wsd6HqsLv33gkuK7/7JZaYpUpLgjtOP7cdfsMdmn4I46kErX+gCbA7vcQ6qkeq+KIK0
        KmfP410jstf3mFPU94tU1L6nbgZZm9PazXCwKrtm/F3Z56VUrvlLjQvaM16u02wT1zacXwfEzXI5vjwQ
        Zs7RoWlKTd23h9ENRYmqoenUuErZ0+HnGqGkzoOMi6ZkdaOiX86vdD5/n5DNepuxb+HiD0NHdjnjLLLi
        6Tl9DHk96ah9X+vv+BqIWLBRQenAxZ0IaoZTXWLNLYFFuEV4IT0tF8lfHDrfke+/xnYvZRUpr91sL/nv
        feKXw0TLkxll6GtsPQbkUn4y8envvNKWeYSjStEFbuY1HFUebKecm2WpxfMFqXd25Iv2yAyJk9aHFb2D
        t76HHHK8f7CJBKaV8+JljZplRZU7E3MhVZ8DtjajHIrTpl90JTR1odGblsXmjlJZ8M/H8MJY7BWQkim9
        C9TiUki7K2RmzREpysv43z/QvqVzsslv1LS4cgE9ZJ8kynJVQKLuwc4GdUomhOu3i1jnZkUmaJtGU9KQ
        0pEJxRebPhdSoDbJIpfJ6ZwnSEOMAI2VbIVADpFJo7undwBqw1PU9RmFVdTPcQEkLBM3j4mUeuzRUu1l
        j+EfVmjFGDTrzjhPHghmlUrS4P0RM4X8i+PxEVbads24QNXZuzZ1HhebwhXYmy5yalNts9/snRWS+BzT
        93SOhc1q6GNibHp0kmlvS/6f/wArkegoUgVCjYfjGyHCPdnJy8lllEvFA3IIp2Romc7sX1Nr8LMXaCTd
        yphLbNo6RyMQc5Z49wxJWV37YtTz78PuKiou9hIhYFFENRhlIaWyZPQ1GGCs0EckUlJGzRzKwW96Eqrl
        0I45Xvhn7FZsnsaLqBlIHN4fvj+Tu403d3WLdeGbkir/AD9+hlWzbQrX7mAsN14q4CpJf8ktbLT0BYWL
        wDau+n4/sBqL2drd1x9EFWw05q5BVKXc/L+yE2Vij4nVpgd01p6cE9IegmcuJnWIPS0j6FJaNhkGIjI7
        GI7HQNho7OYZIMWIKNzria9HZLY3T2L3Cc0aKB5t02wkNE3yPXUv8e4eHH6GnpdhWeSHypDXHZ5PR7Eb
        5Ho9nf4+lb6npNFsmPQ1aeitmxjLkbLUYoztn7LtY9LptNurCK6WjbI7B+gQj3ZHJPsXpU+b5BWiiLJm
        2jBlJ0WUnfgMpitV3b7yJKiotvqUL07FGy8XhmaLZXV5x78fgUpJWwrcLL35HY5x5vw5L0CDYdFRVIJC
        FyINFAkTKQJxF6iGKjF7kyRUQmnXF+X3+haTJD+Pjn35WKsutUT3sFVlw8bPuww2nis36fn5AWwE023Z
        Y8bW7xJ07KatUM6mK6idaVikk+oCcW088mTKV9ioxruGj78/wDlHHxCp+/fiV7u/6jrQWCcSB7EFiPI+
        WLSlpaTHA1lROuny5GjkFGPHSdxZaA14Uw0KArY9GTDQroHhoDVhQQVUROTGqM6hs1Pka2n2euncM6Og
        PRirZErBzF/06WLf0XpUlzG4IlSCus2JcWxKQzpqKtcOrAVVXcV7U00ZjW+SKu/AVhWu8DXaJKxeqJD3
        sWixWMy3acybHQ03gEyqqYKuQMSKzkd37yUeSywNnfJSVR2duLdvi0ufx8jNXZrodpNZfV+iwvuduviB
        TsrfM7vlNk0MQ4hHIWhIspjTM2jlaQNnZSOQmrr4/D2hJWy+iDzfLyAuRypMDOY2yUgjf0+RSPDxVyid
        1brj6DLsOMbQN0LSjxARHJpWFmiZRKUgfN+Xysdinf19+oaNJbvvqdUCqFYMh2x0QWeIm7A5XfMLNlIj
        odhKcQ0AKYWA2CGIoPSiLJjNKRNDsejZKxIyFpVC0ZgxIchU9/U5Uq348DL2jqHu7i4vjbp795FFqJWS
        vclui1Gz0FKS6Y6kqTaTsY2hcm73SXPim/gaLrXdlwfr3jjsUlTGtC7K/wAPuGVUTq1cWTsC7ZrkJsKv
        ZpdqXUzPoVU8jKqYHETGnN2A1dZuJvyFatV5yZ9SlKTx+Qk/IcUu5TYmqruc+1lFp/xavfL6Pkl8jdhW
        vhcOBkabTbrbePqNxlh2x9xK0tlSpvQ+qmbne1EXUxh8jsJXx5fcXcRpQq49++h1zwLtlqkijIunc7Ce
        W+i/P0BqQOMsN9X+PQa0D2GdQq5Crn6v7v7FnVy7/gVlUGrNpY/6/v6A3Vnwuvgdq1uj5Xfovoyva9UN
        iQTtG1dlN7mc31axx2wsfhC6jHYLC8F8iFpA5GjIRCFEQkZ4aXU5F2IQvsHcspZDQkQhJR293bK8Aemr
        3lJRvuxe62+bXGyOEEwNFSCdpbJCCQAd7quIN2WbEIDKQH9VTjL/AJfRX5mnQeLkIJDmqov2hFXV7EIS
        2CQW6fv37Z2dSyIQvsR3B9tjJWOpTXcQhLZSQPt3J931DKfLpj7kINlHHUuxjTcfBfP8P4kISuopdA+9
        knmcIMgrUV+b7vMupJcOH2IQfYCl7v375IWqybu/eCEJfQpBNPiL98r/AFC7xCFEloyRei034W+a+5CB
        HqJ9B1s4cIamZ2FPBCENFBE5M//Z
</value>
  </data>
</root>